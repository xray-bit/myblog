[{"content":"1. 准备工作\r本文基于 openocd-0.12.0 进行撰写，在 Linux 中使用 mingw32 将 OpenOCD 编译成 Win32 应用。\nOpenOCD 依赖以下项目：\nlibusb\n本文使用版本：1.0.26\nhidapi\n本文使用版本：0.13.1\nlibftdi1\n本文使用版本：1.5\ncapstone\n本文使用版本：4.0.2\nlibjaylink\n本文使用版本：0.3.1\n上述依赖下载源码后解压备用。\n2. 编译\r使用下方脚本进行编辑。\n该脚本参考了 xpack 的编译方式。\nOpenOCD 的编译选项可参考该项目下的 configure 的 help 。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 #!/bin/bash BUILD_DIR=/path/to/openocd-build/build # set source env export OPENOCD_SRC=/path/to/openocd export LIBUSB1_SRC=/path/to/libusb-1.0.26 export HIDAPI_SRC=/path/to/hidapi-0.13.1 export LIBFTDI_SRC=/path/to/libftdi1-1.5 export CAPSTONE_SRC=/path/to/capstone-4.0.2 export LIBJAYLINK_SRC=/path/to/libjaylink-0.3.1 # configure openocd cd /path/to/openocd ./bootstrap config_opts=() config_opts+=(\u0026#34;--disable-wextra\u0026#34;) config_opts+=(\u0026#34;--disable-werror\u0026#34;) config_opts+=(\u0026#34;--disable-gccwarnings\u0026#34;) config_opts+=(\u0026#34;--disable-doxygen-html\u0026#34;) config_opts+=(\u0026#34;--disable-doxygen-pdf\u0026#34;) config_opts+=(\u0026#34;--enable-am335xgpio\u0026#34;) config_opts+=(\u0026#34;--enable-amtjtagaccel\u0026#34;) config_opts+=(\u0026#34;--enable-angie\u0026#34;) config_opts+=(\u0026#34;--enable-armjtagew\u0026#34;) config_opts+=(\u0026#34;--enable-at91rm9200\u0026#34;) config_opts+=(\u0026#34;--enable-bcm2835gpio\u0026#34;) config_opts+=(\u0026#34;--enable-cmsis-dap\u0026#34;) config_opts+=(\u0026#34;--enable-cmsis-dap-v2\u0026#34;) config_opts+=(\u0026#34;--enable-dummy\u0026#34;) config_opts+=(\u0026#34;--enable-esp-usb-jtag\u0026#34;) config_opts+=(\u0026#34;--enable-ft232r\u0026#34;) config_opts+=(\u0026#34;--enable-ftdi\u0026#34;) config_opts+=(\u0026#34;--enable-gw16012\u0026#34;) config_opts+=(\u0026#34;--enable-imx_gpio\u0026#34;) config_opts+=(\u0026#34;--enable-jlink\u0026#34;) config_opts+=(\u0026#34;--enable-jtag_dpi\u0026#34;) config_opts+=(\u0026#34;--enable-jtag_vpi\u0026#34;) config_opts+=(\u0026#34;--enable-kitprog\u0026#34;) config_opts+=(\u0026#34;--enable-nulink\u0026#34;) config_opts+=(\u0026#34;--enable-opendous\u0026#34;) config_opts+=(\u0026#34;--enable-openjtag\u0026#34;) config_opts+=(\u0026#34;--enable-osbdm\u0026#34;) config_opts+=(\u0026#34;--enable-parport\u0026#34;) config_opts+=(\u0026#34;--enable-parport-giveio\u0026#34;) config_opts+=(\u0026#34;--enable-presto\u0026#34;) config_opts+=(\u0026#34;--enable-remote-bitbang\u0026#34;) config_opts+=(\u0026#34;--enable-rlink\u0026#34;) config_opts+=(\u0026#34;--enable-stlink\u0026#34;) config_opts+=(\u0026#34;--enable-ti-icdi\u0026#34;) config_opts+=(\u0026#34;--enable-ulink\u0026#34;) config_opts+=(\u0026#34;--enable-usb-blaster\u0026#34;) config_opts+=(\u0026#34;--enable-usb-blaster-2\u0026#34;) config_opts+=(\u0026#34;--enable-usbprog\u0026#34;) config_opts+=(\u0026#34;--enable-vdebug\u0026#34;) config_opts+=(\u0026#34;--enable-vsllink\u0026#34;) config_opts+=(\u0026#34;--enable-xds110\u0026#34;) config_opts+=(\u0026#34;--disable-buspirate\u0026#34;) # not support by MinGW config_opts+=(\u0026#34;--disable-dmem\u0026#34;) # only available on linux config_opts+=(\u0026#34;--disable-parport-ppdev\u0026#34;) # only available on linux or freebsd config_opts+=(\u0026#34;--disable-rshim\u0026#34;) # only available on linux or freebsd config_opts+=(\u0026#34;--disable-sysfsgpio\u0026#34;) # only available on linux config_opts+=(\u0026#34;--disable-xlnx-pcie-xvc\u0026#34;) # only available on linux # configure hidapi cd $HIDAPI_SRC ./bootstrap # configure libjaylink cd $LIBJAYLINK_SRC ./autogen # setup env export MAKE_JOBS=16 export HOST=i686-w64-mingw32 export LIBUSB1_CONFIG=\u0026#34;--enable-shared --disable-static\u0026#34; export HIDAPI_CONFIG=\u0026#34;--enable-shared --disable-static --disable-testgui\u0026#34; export LIBFTDI_CONFIG=\u0026#34;-DSTATICLIBS=OFF -DEXAMPLES=OFF -DFTDI_EEPROM=OFF\u0026#34; export CAPSTONE_CONFIG=\u0026#34;CAPSTONE_BUILD_CORE_ONLY=yes CAPSTONE_STATIC=yes CAPSTONE_SHARED=no\u0026#34; export LIBJAYLINK_CONFIG=\u0026#34;--enable-shared --disable-static\u0026#34; export OPENOCD_CONFIG=${config_opts[@]} cd $OPENOCD_SRC # check if there is tag pointing at HEAD, otherwise take the HEAD SHA-1 as OPENOCD_TAG OPENOCD_TAG=\u0026#34;`git tag --points-at HEAD`\u0026#34; [ -z $OPENOCD_TAG ] \u0026amp;\u0026amp; OPENOCD_TAG=\u0026#34;`git rev-parse --short HEAD`\u0026#34; # check if there is tag pointing at HEAD, if so the release will have the same name as the tag, # otherwise it will be named \u0026#39;latest\u0026#39; RELEASE_NAME=\u0026#34;`git tag --points-at HEAD`\u0026#34; [ -z $RELEASE_NAME ] \u0026amp;\u0026amp; RELEASE_NAME=\u0026#34;latest\u0026#34; [[ $RELEASE_NAME = \u0026#34;latest\u0026#34; ]] \u0026amp;\u0026amp; IS_PRE_RELEASE=\u0026#34;true\u0026#34; || IS_PRE_RELEASE=\u0026#34;false\u0026#34; # set env and call cross-build.sh export OPENOCD_TAG=$OPENOCD_TAG mkdir -p $BUILD_DIR \u0026amp;\u0026amp; cd $BUILD_DIR bash $OPENOCD_SRC/contrib/cross-build.sh $HOST [ $? -eq 0 ] || exit # add missing dlls cd $HOST-root/usr cp `$HOST-gcc --print-file-name=libwinpthread-1.dll` ./bin/ # required by libftdi1.dll. For the gcc-mingw-10.3.x or later \u0026#34;libgcc_s_dw2-1.dll\u0026#34; will need to be copied. cp `$HOST-gcc --print-file-name=libgcc_s_dw2-1.dll` ./bin/ # prepare the artifact ARTIFACT=\u0026#34;openocd-${OPENOCD_TAG}-${HOST}.tar.gz\u0026#34; tar -czf $ARTIFACT * echo \u0026#34;RELEASE_NAME=$RELEASE_NAME\u0026#34; echo \u0026#34;IS_PRE_RELEASE=$IS_PRE_RELEASE\u0026#34; echo \u0026#34;ARTIFACT_PATH=$PWD/$ARTIFACT 3. 使用\r将 /path/to/openocd-build/build/i686-w64-mingw32-root/usr/ 目录下的文件，拷贝至 Windows (x64) 中即可使用。\n","date":"2024-09-02T18:20:00+08:00","permalink":"https://kcode.cc/post/2024/04/cross-compile-openocd-to-windows/","title":"交叉编译 OpenOCD 到 Windows 使用"},{"content":"1. 原因\r之前 clone 可以一个大型开源项目，自己创建了一个分支进行修改。\n随着自己的分支和开源项目自身的迭代，自己每次都使用 merge 将远程的主分支合并到自己分支。最近由于隔了非常多版本没有合并，现在使用 merge 合并出现了大量冲突。\n于是使用 git merge -X theirs [other_branch] 进行合并，该命令是在合并遇到冲突时，保留 [other_branch] 的改动，删除自己的改动。\n合并过程顺利，但是实际出现了本不应该存在的文件，自己的分支没有创建过该文件，远程最新主分支也没有该文件，猜测可能是远程分支中途 commit 出现过该文件，但是在后续的迭代中又删除了该文件。\n由于文件太多，不好一一比较删除，遂另寻他法。\n2. 解决办法\r先使用 git diff 创建差异文件，具体用法：\n1 git diff [待合并的分支] [想要被合并的分支] -- \u0026#39;:![排除的文件(夹)1，可使用通配符]\u0026#39; \u0026#39;:![排除的文件(夹)2，可使用通配符]\u0026#39; \u0026gt; /path/to/patch 然后使用 git apply 应用差异，具体用法：\n1 2 3 4 5 # 检查是否可以应用，无任何输出则表示可以应用 git apply --check /path/to/patch # 应用差异 (先修复空格) git apply --reject --whitespace=fix /path/to/patch 此时基本没太大问题，因为上面使用了 --whitespace=fix，有些末尾的空行等被删除了，此时再使用 git merge -X theirs [other_branch] 合并一次即可。\n","date":"2024-04-10T20:57:00+08:00","image":"https://kcode.cc/post/2024/04/git-merge-and-patch/cover_hu2247475602474203589.webp","permalink":"https://kcode.cc/post/2024/04/git-merge-and-patch/","title":"大型项目使用 git merge 导致多文件混乱问题及解决"},{"content":"1. 项目客制化\r用户可以自定义的内容有：\n配置 Buildroot，即 make menuconfig 的内容 配置其他组件，即 make linux-menuconfig、make busybox-menuconfig 等等 自定义已生成的文件系统： 添加或覆盖目标板文件系统的文件（通过宏 BR2_ROOTFS_OVERLAY） 修改或删除目标板文件系统的文件（通过宏 BR2_ROOTFS_POST_BUILD_SCRIPT） 在生成镜像文件前运行任意命令（通过宏 BR2_ROOTFS_POST_BUILD_SCRIPT） 修改文件权限和所属关系（通过宏 BR2_ROOTFS_DEVICE_TABLE） 添加自定义设备节点（devices node）（通过宏 BR2_ROOTFS_STATIC_DEVICE_TABLE） 添加自定义用户账户（通过宏 BR2_ROOTFS_USERS_TABLES） 在生成镜像文件后运行任意命令（通过宏 BR2_ROOTFS_POST_IMAGE_SCRIPT） 为某些软件包打补丁（通过宏 BR2_GLOBAL_PATCH_DIR） 添加自定义软件包 2. 官方推荐目录结构\r1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 +-- board/ | +-- \u0026lt;company\u0026gt;/ | +-- \u0026lt;boardname\u0026gt;/ | +-- linux.config | +-- busybox.config | +-- \u0026lt;other configuration files\u0026gt; | +-- post_build.sh | +-- post_image.sh | +-- rootfs_overlay/ | | +-- etc/ | | +-- \u0026lt;some files\u0026gt; | +-- patches/ | +-- foo/ | | +-- \u0026lt;some patches\u0026gt; | +-- libbar/ | +-- \u0026lt;some other patches\u0026gt; | +-- configs/ | +-- \u0026lt;boardname\u0026gt;_defconfig | +-- package/ | +-- \u0026lt;company\u0026gt;/ | +-- Config.in (if not using a br2-external tree) | +-- \u0026lt;company\u0026gt;.mk (if not using a br2-external tree) | +-- package1/ | | +-- Config.in | | +-- package1.mk | +-- package2/ | +-- Config.in | +-- package2.mk | +-- Config.in (if using a br2-external tree) +-- external.mk (if using a br2-external tree) +-- external.desc (if using a br2-external tree) 2.1. 客制化内容\r如果我们有多个相近的项目，可能会共用一些配置，我们不需要为每个项目都配置一遍相同的内容，可以使用以下结构进行配置：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 +-- board/ +-- \u0026lt;company\u0026gt;/ +-- common/ | +-- post_build.sh | +-- rootfs_overlay/ | | +-- ... | +-- patches/ | +-- ... | +-- fooboard/ +-- linux.config +-- busybox.config +-- \u0026lt;other configuration files\u0026gt; +-- post_build.sh +-- rootfs_overlay/ | +-- ... +-- patches/ +-- ... 例如需要为 fooboard 的软件包打补丁，可以进行如下配置：\nBR2_GLOBAL_PATCH_DIR=\u0026quot;board/\u0026lt;company\u0026gt;/common/patches board/\u0026lt;company\u0026gt;/fooboard/patches\u0026quot;\n这样的情况，会先为公共部分（common）的软件包打补丁，然后为目标板（fooboard）的软件包打补丁。\n1 2 3 4 5 6 7 BR2_ROOTFS_OVERLAY BR2_ROOTFS_POST_BUILD_SCRIPT BR2_ROOTFS_DEVICE_TABLE BR2_ROOTFS_STATIC_DEVICE_TABLE BR2_ROOTFS_USERS_TABLES BR2_ROOTFS_POST_IMAGE_SCRIPT BR2_GLOBAL_PATCH_DIR 上述宏都可使用此方式配置，以空格分隔，Buildroot 将从左到右顺序执行。\n3. 保存 Buildroot 配置文件\r使用 make savedefconfig 命令可以保存当前 .config 文件为 defconfig 文件。也可使用 BR2_DEFCONFIG 参数指定保存的位置，如 make savedefconfig BR2_DEFCONFIG=\u0026lt;path-to-defconfig\u0026gt;。\n建议保存的位置为 configs/\u0026lt;boardname\u0026gt;_defconfig，保存在此位置的文件，可以被 make list-defconfigs 列处，并且可以使用 make \u0026lt;boardname\u0026gt;_defconfig 命令重新设为当前的待编译的配置文件。\n4. 保存其他组件的配置文件\rBusyBox、Linux kernel、U-Boot uClibc 等配置改变后，也需要保存。 对此，Buildroot 也提供了便捷的命令来保存这些文件的修改。\nmake linux-update-defconfig 命令会将 Linux kernel 的配置文件保存在宏 BR2_LINUX_KERNEL_CUSTOM_CONFIG_FILE 指定的位置 make busybox-update-config 命令会将 BusyBox 的配置文件保存在宏 BR2_PACKAGE_BUSYBOX_CONFIG 指定的位置 make uclibc-update-config 命令会将 uClibc 的配置文件保存在宏 BR2_UCLIBC_CONFIG 指定的位置 make barebox-update-defconfig 命令会将 BareBox 的配置文件保存在宏 BR2_TARGET_BAREBOX_CUSTOM_CONFIG_FILE 指定的位置 make uboot-update-defconfig 命令会将 U-Boot 的配置文件保存在宏 BR2_TARGET_UBOOT_CUSTOM_CONFIG_FILE 指定的位置 5. 客制化已经生成的文件系统\rBuildroot 官方推荐两种方式客制化文件系统：Root filesystem overlays 和 Post-build scripts。两种可以组合使用。\nRoot filesystem overlays (BR2_ROOTFS_OVERLAY)\nRoot filesystem overlays 是直接拷贝宏 BR2_ROOTFS_OVERLAY 指定路径下的文件至 rootfs 中的，并且是合并且覆盖的方式，即存在的文件会被替换，不存在的文件会被创建。版本控制文件（如：.git、.svn、.hg等）、.empty、以 ~ 结尾的文件将被排除，不进行拷贝。\n可以指定多个 rootfs overlay 目录，见 2.1. 客制化内容\nPost-build scripts (BR2_ROOTFS_POST_BUILD_SCRIPT)\nPost-build scripts 是在 Buildroot 编译完所有的软件之后、生成 rootfs 镜像文件之前被执行的脚本。\n同样可以指定多个脚本执行。\nBuildroot 在执行这些脚本时，会传递一些参数进去：\n宏 BR2_ROOTFS_POST_SCRIPT_ARGS 指定的参数 $BR2_CONFIG Buildroot 配置文件 .config 的文件路径 $CONFIG_DIR Buildroot 配置文件 .config 的所在目录 $HOST_DIR 给目标板程序编写人员使用的工具的目录 $STAGING_DIR 目标板编写程序所需用到的头文件、库文件等的目录 $TARGET_DIR 目标板文件系统目录 $BUILD_DIR 编译过程中使用的临时目录 $BINARIES_DIR 二进制文件目录，即镜像文件所在的目录 $BASE_DIR output 的目录，通常情况下是 $BUILD_DIR 的上一级目录 还有三种官方不推荐的修改文件系统的方式：\n直接修改 自定义文件系统骨架(skeleton) (BR2_ROOTFS_SKELETON_CUSTOM) Post-fakeroot scripts (BR2_ROOTFS_POST_FAKEROOT_SCRIPT) 附1：文章修订记录\r2023/06/29 15:35 CST 文章初次发表 2023/07/20 19:44 CST 修正 4. 保存其他组件的配置文件 中的描述错误 ","date":"2023-06-29T15:35:00+08:00","image":"https://kcode.cc/post/2023/06/buildroot-note-1/cover_hu5892699283839873971.webp","permalink":"https://kcode.cc/post/2023/06/buildroot-note-1.html","title":"Buildroot 注解 1"},{"content":"1. 安装基础依赖\r1 2 3 sudo apt update sudo apt upgrade sudo apt dist-upgrade 1 2 3 4 5 6 sudo apt install git python3 python3-pip \\ python3-venv software-properties-common \\ mariadb-server mariadb-client \\ redis-server curl nodejs npm xvfb \\ libfontconfig wkhtmltopdf \\ default-libmysqlclient-dev supervisor 2. 配置 Mariadb Server\r2.1. 初始化 Mariadb\r1 sudo mysql_secure_installation 2.2. 编辑配置文件\r1 sudo vim /etc/mysql/mariadb.conf.d/50-server.cnf 1 2 3 4 5 6 [mysqld] bind-address = 0.0.0.0 # 此处根据需要修改 character-set-client-handshake = FALSE character-set-server = utf8mb4 collation-server = utf8mb4_unicode_ci 2.3. 重启 Mariadb 服务\r重启服务，使配置文件生效。\n1 sudo systemctl restart mariadb 3. 安装 Yarn\r1 sudo npm install -g yarn 4. 配置 Redis\r4.1. 新增两份配置\rfrappe-bench-redis-cache 和 frappe-bench-redis-queue 需要用到。\n1 2 sudo cp /etc/redis/redis.conf /etc/redis/redis-frappe-queue.conf sudo cp /etc/redis/redis.conf /etc/redis/redis-frappe-cahce.conf 修改 /etc/redis/redis-frappe-queue.conf 配置：\n1 port 11000 修改 /etc/redis/redis-frappe-cache.conf 配置：\n1 port 13000 4.2. 启动服务\r1 2 sudo /usr/bin/redis-server /etc/redis/redis-frappe-queue.conf --daemonzie yes sudo /usr/bin/redis-server /etc/redis/redis-frappe-cahce.conf --daemonzie yes 4.3. 检查服务是否启动\r1 2 redis-cli -h localhost -p 11000 ping redis-cli -h localhost -p 13000 ping 5. 使用 Frappe Bench 创建站点\r5.1. 安装\r1 pip3 install frappe-bench ansible --break-system-packages 5.2. 初始化 Frappe Bench\r1 bench init --frappe-branch version-14 frappe-bench 5.3. 切换工作目录\r1 cd frappe-bench 5.4. 修改用户目录权限\r1 sudo chmod -R o+rx /home/[frappe-user]/ 5.5. 创建新的站点\r1 bench new-site [your-site-name] 6. 安装 ERPNext 和其他应用\r6.1. 下载必要的应用\r1 2 3 bench get-app payments bench get-app --branch version-14 erpnext bench get-app hrms 6.2. 安装应用\r1 2 bench --site [your-site-name] install-app erpnext bench --site [your-site-name] install-app hrms 7. 配置生产环境\r7.1. 启用 scheduler 服务\r1 bench --site [your-site-name] enable-scheduler 7.2. 关闭维护模式\r1 bench --site [your-site-name] set-maintenance-mode off 7.3. 切换到生产环境配置\r1 sudo bench setup production [frappe-user] 7.4. 配置 Nginx\r1 bench setup nginx 7.5. 配置最终服务\r1 sudo supervisorctl restart all 1 sudo bench setup production [frappe-user] 8. 访问 ERPNext\r浏览器输入服务器IP即可访问，初始用户名为：Administrator，初始密码为安装 Frappe 时的密码。\n附1：文章修订记录\r2023/06/21 11:58 CST 文章初次发表 2023/09/28 10:40 CST 修正文中多处错误 ","date":"2023-06-21T11:58:37+08:00","image":"https://kcode.cc/post/2023/06/erpnext-14-manual-installation/cover_hu2907887203176475309.webp","permalink":"https://kcode.cc/post/2023/06/erpnext-14-manual-installation.html","title":"ERPNext 14 常规安装流程记录"},{"content":"系统自带输入法对我而言已经完全足够了，但是没有内置“小鹤双拼”的方案，每次到新的电脑都要在输入法设置里一个一个按键绑定，较为繁琐。\n偶然的机会发现可以直接在注册表里添加键值，步骤如下：\n打开注册表编辑器 进入如下路径：HKEY_CURRENT_USER\\Software\\Microsoft\\InputMethod\\Settings\\CHS 新建 字符串值 名称为 UserDefinedDoublePinyinScheme{X}，其中 {X} 为数字，一般做序号用，如：UserDefinedDoublePinyinScheme0 数据值为 小鹤双拼*2*^*iuvdjhcwfg^xmlnpbksqszxkrltvyovt，“小鹤双拼”为自定义方案的名称，“2”为零声母模式，后面的估计是按声韵母排序绑定到每个键的顺序。 在输入法里将“小鹤双拼”设为默认即可 ","date":"2022-12-29T17:36:00+08:00","permalink":"https://kcode.cc/post/2022/12/set-up-flypy-on-windows.html","title":"在 Windows 自带输入法上使用小鹤双拼"},{"content":"1. 结构体定义\r该结构体定义在头文件 \u0026lt;termios.h\u0026gt; 中，至少包含以下成员：\n1 2 3 4 5 tcflag_t c_iflag; /* input modes */ tcflag_t c_oflag; /* output modes */ tcflag_t c_cflag; /* control modes */ tcflag_t c_lflag; /* local modes */ cc_t c_cc[NCCS]; /* special characters */ 2. 结构体成员注解\r2.1. 输入模式标志 c_iflag\rc_iflag 用于设置终端 I/O 的输入参数，标志宏定义如下：\nIGNBRK\n忽略输入时的中断（BREAK）条件\nBRKINT\n如果设置了 IGNBRK ，则忽略中断； 如果没有设置 IGNBRK ，但设置了 BRKINT ，那么中断（BREAK）会导致输入输出队列被冲洗（flush）；如果终端是前台进程组，中断（BREAK）将会向该终端发送 SIGINT 信号； 如果 IGNBRK 和 BRKINT 都未设置，中断（BREAK）字符将被读取为空字节（\u0026rsquo;\\0\u0026rsquo;）；如果设置了 PARMAR 标志，那么它将被读取为序列 \\377 \\0 \\0。 IGNPAR\n忽略帧错误和校验错误\nPARMRK\n（待补充）\nINPCK\n使能输入奇偶校验\nISTRIP\n有效输入字节被剥离为 7 位\nINLCR\n将输入的 NL 转换为 CR\nIGNCR\n忽略输入时的 CR\nICRNL\n将输入的 CR 转换为 NL （除非设置了 IGNCR ）\nIUCLC\n（不属于 POSIX）在输入时将大写字符转换成小写\nIXON\n在输出上使能 XON/XOFF 流控制\nIXANY\n输入任何字符都将重启停止的输出\nIXOFF 在输入上使能 XON/XOFF 流控制\nIMAXBEL\n（不属于 POSIX）输入队列已满时响铃；Linux 没有实现该标志位\nIUTF8\n（不属于 POSIX）输入为 UTF8 字符\n2.2. 输出模式标志 c_oflag\rc_oflag 用于设置终端 I/O 的输出参数，标志宏定义如下：\nOPOST\n使能实现定义（implementation-defined）的输出处理（？）\nOLCUC\n（不属于 POSIX）在输出时将大写字符转换成小写\nONLCR\n在输出时将 NL 转换成 CR-NL\nOCRNL\n在输出时将 CR 转换成 NL\nONOCR\n不在第 0 列输出 CR\nONLRET\n不输出 CR\nOFILL\n以发送填充字符代替使用定时进行延时\nOFDEL\n填充字符设为 ASCII DEL (0177)，如果未设置，则为 ASCII NULL (\u0026rsquo;\\0\u0026rsquo;)；Linux 没有实现该标志位\nNLDLY\n（待补充）\nCRDLY\n（待补充）\nTABDLY\n（待补充）\nBSDLY\n（待补充）\nVTDLY\n（待补充）\nFFDLY\n（待补充）\n2.3. 控制模式标志 c_cflag\rc_cflag 用于设置终端 I/O 的控制参数，标志宏定义如下：\nCBAUD\n（不属于 POSIX）波特率掩码（ 4 + 1 位）。[要求 _BSD_SOURCE 或 _SVID_SOURCE]\nCBAUDEX\n（不属于 POSIX）额外的波特率掩码（ 1 位），包含在 CBAUD 中。 [要求 _BSD_SOURCE 或 _SVID_SOURCE]\nCSIZE\n字符大小掩码，值为 CS5、CS6、CS7 或 CS8\nCSTOPB\n将停止位设为 2 位，如果未设置，则为 1 位\nCREAD\n启用接收器\nPARENB 使能对输出的奇偶校验生成和对输入的奇偶校验检查\nPARODD\n使能奇校验，如果未设置，则为偶校验\nHUPCL\n（待补充）\nCLOCAL\n忽略解制解调器状态行\nLOBLK\n（待补充）\nCIBAUD\n（不属于 POSIX）输入波特率掩码\nCMSPAR\n（不属于 POSIX）（待补充）\nCRTSCTS\n（不属于 POSIX）启用硬件 RTS/CTS 流控制\n2.4. 本地模式标志 c_lflag\rc_lflag 用于设置终端 I/O 的本地参数，标志宏定义如下：\nISIG\n当接收到 INTR、QUIT、SUSP 或 DSUSP 字符时，产生相应的信号\nICANON\n使能规范模式\nXCASE\n（不属于 POSIX）（待补充）\nECHO\n使能回显\nECHOE\n如果设置了 ICANON，则 ERASE 字符将可视地擦除字符\nECHOK\n如果设置了 ICANON，则 KILL 字符将可视地擦除当前行\nECHONL\n如果设置了 ICANON，则回显 NL 字符（ ECHO 是否设置都有效 ）\nECHOCTL\n（不属于 POSIX）如果设置了 ECHO，则除 TAB、NL、START 和 STOP 外的特殊终端字符，都回显为 ^X，例如 0x08 (BS) 将回显为 ^H\nECHOPRT\n如果设置了 ICANON 和 ECHO，则 ERASE 字符使所有正被擦除的字符按它们被擦除的方式打印\nECHOKE\n如果设置了 ICANON，则按照 ECHOE 和 ECHOPRT 指定的方式来回显行中的每个字符\nDEFECHO\n（不属于 POSIX）仅在进程正在读取时回显；Linux 没有实现该标志位\nFLUSHO\n（不属于 POSIX）（待补充）\nNOFLSH\n（不属于 POSIX）（待补充）\nTOSTOP\n（待补充）\nPENDIN\n（不属于 POSIX）（待补充）\nIEXTEN\n（不属于 POSIX）（待补充）\n2.5. 终端特殊字符定义数组 c_cc\rVDISCARD VDSUSP VEOF VEOL VEOL2 VERASE VINTR VKILL VLNEXT VMIN VQUIT VPEPRINT VSTART VSTATUS VSTOP VSUSP VSWTCH VTIME VMERASE ","date":"2022-12-05T19:17:40+08:00","permalink":"https://kcode.cc/post/2022/12/annotation-of-linux-termios-structure.html","title":"Linux termios 结构体注解"},{"content":"1. 准备工作\rOpenSSH 依赖 zlib、OpenSSL。\n源码下载：\nzlib\nzlib.net\nOpenSSL\nopenssl.org\nOpenSSH\nmirrors.aliyun.com\n本文基于 zlib-1.2.11、openssl-1.1.1k、openssh-8.6p1 撰写。\n2. 交叉编译\r2.1. zlib\r2.1.1. 配置 Makefile\r1 2 3 CHOST=arm-linux \\ ./configure \\ --prefix=/path/to/install CHOST\nzlib 的 configure 使用此变量自动配置交叉编译工具的前缀，按上述配置，即自动将交叉编译工具名称设为 arm-linux-gcc、arm-linux-ld 等。 2.1.2. 编译与安装\r1 make \u0026amp;\u0026amp; make install 将安装在 --prefix 所指定的目录。\n2.2. OpenSSL\r参考之前的文章 移植 OpenSSL。\n2.3. OpenSSH\r2.3.1. 配置 Makefile\r1 2 3 4 5 6 7 CC=arm-linux-gcc \\ ./configure \\ --host=arm-linux \\ --with-libs \\ --with-zlib=/path/to/zlib/install \\ --with-ssl-dir=/path/to/openssl/install \\ --disable-etc-default-login CC\n指定交叉编译工具。\n--host\n目标平台，交叉编译时需指定。\n--with-zlib\n指定 zlib 的安装位置。\n--with-ssl-dir\n指定 openssl 的安装位置，如果 openssl 下有共享库，则编译时自动使用 openssl 的共享库（按照上述配置情况下），否则使用静态库。\n此处使用默认路径，不设置 \u0026ndash;prefix。\n2.3.2. 编译\r1 make 注意：这里不要安装。\n3. 在目标板上使用\r3.1. 安装至目标板\r3.1.1. 准备工作\r确保目标板上有以下目录，没有则创建\n/usr/libexec /usr/local/bin /usr/local/etc 在目标板 /etc/passwd 文件中添加一行\n1 sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin 设置 root 用户密码（已设置则忽略）\n1 passwd -a md5 root 3.1.2. 拷贝程序至目标板\r将 OpenSSH 交叉编译后的文件（在 openssh-8.6p1 根目录）拷贝至目标板相应目录\n文件名 目标板目录 sftp-server /usr/libexec ssh-keysign /usr/libexec sshd /usr/local/bin ssh /usr/local/bin scp /usr/local/bin sftp /usr/local/bin ssh-add /usr/local/bin ssh-agent /usr/local/bin ssh-keygen /usr/local/bin ssh-keyscan /usr/local/bin sshd_config /usr/local/etc ssh_config /usr/local/etc 此为默认路径，若在配置时设定了相关目录，则按设定修改。\n在目标板建立软链\n1 2 3 4 5 6 7 8 9 cd /usr/bin ln -s ../local/bin/sshd \u0026amp;\u0026amp; \\ ln -s ../local/bin/ssh \u0026amp;\u0026amp; \\ ln -s ../local/bin/scp \u0026amp;\u0026amp; \\ ln -s ../local/bin/sftp \u0026amp;\u0026amp; \\ ln -s ../local/bin/ssh-add \u0026amp;\u0026amp; \\ ln -s ../local/bin/ssh-agent \u0026amp;\u0026amp; \\ ln -s ../local/bin/ssh-keygen \u0026amp;\u0026amp; \\ ln -s ../local/bin/ssh-keyscan 修改目标板上的 sshd_config 文件\n原内容：\n1 2 3 4 5 ... #Port 22 ... #PermitRootLogin prohibit-password ... 修改为：\n1 2 3 4 5 ... Port 22 ... PermitRootLogin yes ... 3.2. 建立工作目录\r在目标板上建立工作目录\n1 2 mkdir /var/run mkdir -p /var/empty/sshd 确保目标板 /var/empty/sshd 的权限为 755\n1 chmod -R 755 /var/empty 在目标板上挂载 devpts\n1 2 mkdir /dev/pts mount devpts -t devpts /dev/pts 3.3. 生成密钥\r1 2 3 cd /usr/local/etc ssh-keygen -t ed25519 -f ssh_host_ed25519_key -N \u0026#34;\u0026#34; ssh-keygen -t ed25519 -f ssh_host_key -N \u0026#34;\u0026#34; 3.4. 开启 sshd\r1 /usr/sbin/sshd ","date":"2021-07-30T19:08:55+08:00","permalink":"https://kcode.cc/post/2021/07/porting-openssh.html","title":"移植 OpenSSH"},{"content":"1. 准备工作\r1.1. 下载源码\r两种方式下载源码:\ngit clone 直接下载指定 tag 源码 对于第 1 种方式，会把历史 commit 都 clone 下来，对于立项久远、社区活跃的项目来说，体积较大，加之 github 在国内访问不稳定，而且只是使用不是开发，所以这里选择第 2 种方式。\n在其项目 Release 页找到最新的 Release Tag，下载 Source code。\n1.2. 安装依赖\r1 apt install build-essential gcc make cmake cmake-gui cmake-curses-gui 如果需要使用 SSL 功能，则还需要预先交叉编译 OpenSSL，可参考之前的文章 移植 OpenSSL。\n如果需要生成文档，还需要安装 doxygen 和 graphhviz：\n1 apt install doxygen graphviz 2. 配置 Makefile\r2.1. 修改交叉编译工具链\r新建一个目录作为编译用目录，拷贝 paho.mqtt 源码目录下 cmake 目录内的 toolchain.linux-arm11.cmake 至编译用目录，修改以下内容为自己的交叉编译工具链：\n1 SET(CMAKE_C_COMPILER arm-linux-gnueabihf-gcc) 2.2. 生成 Makefile\r1 2 3 4 5 6 7 8 cmake \\ -DPAHO_WITH_SSL=TRUE \\ -DPAHO_BUILD_SAMPLES=TRUE \\ -DPAHO_BUILD_DOCUMENTATION=TRUE \\ -DPAHO_HIGH_PERFORMANCE=TRUE \\ -DOPENSSL_ROOT_DIR=/path/to/openssl/install/root \\ -DCMAKE_TOOLCHAIN_FILE=/path/to/toolchain.linux-arm11.cmake \\ /path/to/paho.mqtt.c/source 参数 默认值 描述 PAHO_BUILD_SHARED TRUE 编译成共享库 PAHO_BUILD_STATIC FALSE 编译成静态库 PAHO_HIGH_PERFORMANCE FALSE 高性能模式，如果设为 TRUE 则编译时 debug 追踪等功能将会被排除 PAHO_WITH_SSL FALSE 开启 SSL 功能 OPENSSL_ROOT_DIR “” OpenSSL 安装目录 PAHO_BUILD_DOCUMENTATION FALSE 生成文档 PAHO_BUILD_SAMPLES FALSE 编译示例 如果 OPENSSL_ROOT_DIR 目录内含有共享库，那么编译完成的 paho.mqtt 共享库需要依赖 OpenSSL 的共享库。\n3. 编译\r1 make 如果遇到 ld: cannot find -lanl 的错误，则需要在源码目录下，找到 src/CMakeLists.txt，将其中的以下内容注释（使用 # 注释）：\n1 2 3 4 FIND_LIBRARY(LIB_ANL anl) IF(LIB_ANL) SET(LIBS_SYSTEM \u0026#34;${LIBS_SYSTEM}\u0026#34; anl) ENDIF() 然后重新生成一次 Makefile。原因是 libanl 只支持 glibc。\n3.1. 打包（可选）\r1 make package ","date":"2021-07-13T14:24:40+08:00","permalink":"https://kcode.cc/post/2021/07/porting-paho-mqtt.html","title":"移植 Paho MQTT"},{"content":"1. 源码\r官网：https://www.openssl.org/source/\n2. 配置 Makefile\r1 2 3 4 ./Configure linux-armv4 \\ --cross-compile-prefix=arm-linux- \\ --prefix=/path/to/install \\ no-asm shared no-async linux-armv4\n从 config 文件来看，armv[1-3] 使用 linux-generic32，armv[7-9] 使用 linux-armv4。\nno-asm\n不使用汇编代码；从 INSTALL 文件得知，建议 debug 期间使用，生产环境不使用。\nshared\n生成共享库。\nno-async\nuclibc/musll-ibc 等库不提供 ucontext 库，所以无法使用异步操作。\n此配置是基于 openssl-1.1.1k 所写，不同版本可能会有差异，具体查看源码目录下的 INSTALL 文件。\n3. 编译与安装\r1 make \u0026amp;\u0026amp; make install 最终程序将安装在 --prefix 所指定的目录中。\n","date":"2021-07-13T10:11:05+08:00","permalink":"https://kcode.cc/post/2021/07/porting-openssl.html","title":"移植 OpenSSL"},{"content":"1. 准备工作\r确定自己的是 VOL 版 Windows 或者 Office\n找到对应版本（专业版、教育版等）的 VOL 密钥\n可参考 Windows 和 Office KMS 密钥\n2. 激活 Windows\r管理员权限运行 CMD 或 PowerShell\n安装产品密钥( xxxxx 表示对应自己版本的密钥)\n1 slmgr /ipk xxxxx 设置 KMS 服务器\n1 slmgr /skms example.com:1688 激活 Windows\n1 slmgr /ato 查看激活信息\n1 slmgr /dlv 更多命令及命令帮助直接输入 slmgr。\n3. 激活 MS Office\r管理员权限运行 CMD 或 PowerShell\n进入 Office 安装的根路径\n（以 64 位 Office 2016 默认安装路径为例：C:\\Program Files\\Microsoft Office\\Office16）\n1 cd C:\\Program Files\\Microsoft Office\\Office16 安装产品密钥( xxxxx 表示对应自己版本的密钥)\n1 cscript ospp.vbs /inpkey:xxxxx 设置 KMS 服务器\n1 cscript ospp.vbs /sethst:example.com:1688 激活 Office\n1 cscript ospp.vbs /act ","date":"2019-06-30T22:52:13+08:00","permalink":"https://kcode.cc/post/2019/06/activate-windows-and-office-by-kms.html","title":"通过 KMS 激活 Windows 和 Office"},{"content":"自用的 vim 配置，方便以后新装系统使用。\n.vimrc 配置如下：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 colorscheme inkpot filetype on syntax on set nu set autoindent \u0026#34; 自动缩进 set cindent \u0026#34; 针对C语言自动缩进 set smartindent \u0026#34; 智能对齐 set tabstop=4 \u0026#34; 缩进时4个空格长度 set softtabstop=4 \u0026#34; 退格退回缩进长度 set shiftwidth=4 \u0026#34; 每一级缩进的长度 set expandtab \u0026#34; 用空格代替制表符缩进 set showmatch \u0026#34; 自动匹配括号 \u0026#34; 状态栏 set laststatus=2 set statusline=%F%m%r%h%w\\ [FORMAT=%{\u0026amp;ff}]\\ [TYPE=%Y]\\ [ASCII=\\%03.3b]\\ [HEX=\\%02.2B]\\ [POS=%04l,%04v][%p%%]\\ [LEN=%L] \u0026#34; 配置括号自动补全 inoremap ( ()\u0026lt;Esc\u0026gt;i inoremap [ []\u0026lt;Esc\u0026gt;i inoremap { {\u0026lt;CR\u0026gt;}\u0026lt;Esc\u0026gt;O autocmd Syntax html,vim inoremap \u0026lt; \u0026lt;lt\u0026gt;\u0026gt;\u0026lt;Esc\u0026gt;i| inoremap \u0026gt; \u0026lt;c-r\u0026gt;=ClosePair(\u0026#39;\u0026gt;\u0026#39;)\u0026lt;CR\u0026gt; inoremap ) \u0026lt;c-r\u0026gt;=ClosePair(\u0026#39;)\u0026#39;)\u0026lt;CR\u0026gt; inoremap ] \u0026lt;c-r\u0026gt;=ClosePair(\u0026#39;]\u0026#39;)\u0026lt;CR\u0026gt; inoremap } \u0026lt;c-r\u0026gt;=CloseBracket()\u0026lt;CR\u0026gt; inoremap \u0026#34; \u0026lt;c-r\u0026gt;=QuoteDelim(\u0026#39;\u0026#34;\u0026#39;)\u0026lt;CR\u0026gt; inoremap \u0026#39; \u0026lt;c-r\u0026gt;=QuoteDelim(\u0026#34;\u0026#39;\u0026#34;)\u0026lt;CR\u0026gt; function ClosePair(char) if getline(\u0026#39;.\u0026#39;)[col(\u0026#39;.\u0026#39;) - 1] == a:char return \u0026#34;\\\u0026lt;Right\u0026gt;\u0026#34; else return a:char endif endf function CloseBracket() if match(getline(line(\u0026#39;.\u0026#39;) + 1), \u0026#39;\\s*}\u0026#39;) \u0026lt; 0 return \u0026#34;\\\u0026lt;CR\u0026gt;}\u0026#34; else return \u0026#34;\\\u0026lt;Esc\u0026gt;j0f}a\u0026#34; endif endf function QuoteDelim(char) let line = getline(\u0026#39;.\u0026#39;) let col = col(\u0026#39;.\u0026#39;) if line[col - 2] == \u0026#34;\\\\\u0026#34; return a:char elseif line[col - 1] == a:char return \u0026#34;\\\u0026lt;Right\u0026gt;\u0026#34; else return a:char.a:char.\u0026#34;\\\u0026lt;Esc\u0026gt;i\u0026#34; endif endf 配色方案 inkpot 来自 Vivify。\n","date":"2019-06-30T21:51:18+08:00","permalink":"https://kcode.cc/post/2019/06/vim-configuration-for-self-use.html","title":"自用 vim 配置文件"},{"content":"1. 无显示器/键鼠初始化配置\r1.1. 开启 sshd\r在 PC 上部署完 Raspbian 系统至 TF 卡上后，在 boot 分区根目录新建一个名为 ssh 的空文件即可在树莓派启动后开启 Raspbian 的 sshd 服务。\n树莓派默认账户：pi，默认密码：raspberry。\n1.2. 配置 WLAN\r在 PC 上部署完 Raspbian 系统至 TF 卡后，在 boot 分区根目录新建一个名为 wpa_supplicant.conf 的文本文件，在文件中输入一下内容：\n1 2 3 4 5 6 7 8 9 10 11 country=CN # 国家/地区 ctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdev update_config=1 network={ ssid=\u0026#34;WiFi-Name\u0026#34; # WiFi 名称 psk=\u0026#34;12345678\u0026#34; # WiFi 密码 key_mgmt=WPA-PSK # 加密方式 priority=1 # 优先级，数字越大优先级越高 scan_ssid=1 # 连接隐藏 WiFi 加上此行，否则不加或设为 0 } 2. 其他配置\r2.1. 配置程序自启\rDemo 如下：\n1 2 3 4 5 6 7 8 9 10 11 12 [Unit] Description=demo service [Service] Type=forking ExecStart=/path/to/your/bin StandardOutput=syslog StandardError=inherit User=nobody \u0026lt;= 以 nobody 用户身份运行 [Install] WantedBy=multi-user.target 移动/复制到 /usr/lib/systemd/system/ 目录下，运行 # systemctl enable demo.service 即可开启该服务。\n","date":"2019-06-30T21:27:10+08:00","permalink":"https://kcode.cc/post/2019/06/memo-of-raspberry-pi.html","title":"树莓派备忘"},{"content":"1. 安装 Samba\r1 sudo apt sintall samba 2. 编辑配置文件\r/etc/samba/smb.conf\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # Global parameters [global] log file = /var/log/samba/log.%m max log size = 50 syslog = 0 panic action = /usr/share/samba/panic-action %d usershare allow guests = Yes load printers = No # 没有打印机，不需要加载 client max protocol = SMB3 # 设置客户端最大协议版本 client min protocol = SMB2 # 设置客户端最小协议版本 server min protocol = SMB2 # 服务器最小协议版本 map to guest = Bad User obey pam restrictions = Yes pam password change = Yes passwd chat = *Enter\\snew\\s*\\spassword:* %n\\n *Retype\\snew\\s*\\spassword:* %n\\n *password\\supdated\\ssuccessfully* . passwd program = /usr/bin/passwd %u security = USER # 开启非匿名访问 server role = standalone server unix password sync = Yes dns proxy = No idmap config * : backend = tdb # 共享文件夹名称 [myshares] comment = my shares path = /mnt/hdd # 此处为需要共享的目录 read only = No writeable = yes # 开启可写( testparm 默认不显示 ) 关于 Samba 协议版本：由于 Windows 10 已经默认不支持 SMBv1 了 ( 仍可通过 「启用或关闭 Windows 功能」 来开启对 SMBv1 的支持 )，所以这里将协议版本设置为 SMBv2 。\n2.1. 测试配置是否正确\r1 testparm 3. 建立 Samba 账户\r3.1. 新建系统账户\r待创建的 Samba 账户必须已经在 Linux 中存在；此处也可直接用已经存在的账户，不要新建。\n1 2 3 sudo useradd -G users smb sudo passwd smb (输入两次密码，此为 Linux 账户的密码，非 Samba 账户的访问密码) 3.2. 使用 pdbedit 新增 Samba 账户\r1 2 sudo pdbedit -a -u smb (接下来输入 smb 的密码) 3.2.1. 查询目前已经存在的 Samba 账号\r1 pdbedit -L 3.2.2 修改密码\r1 smbpasswd smb 4. 重启 Samba 服务确保新配置生效\r1 systemctl restart smbd.service \u0026amp;\u0026amp; systemctl restart nmbd.service 5. 其他\r5.1. 关于挂载 NTFS 的移动硬盘遇到的坑\r使用 sudo mount /dev/sda1 /mnt/hdd 挂载以后，发现登录 Samba 后无法写入，总是提示没有权限。几番折腾发现是 Linux 内核对 NTFS 文件系统的支持不足，只支持读取，要写入的话需要安装第三方 NTFS 支持包 ntfs-3g，安装后在挂载时加上参数 -t ntfs-3g 即可。\n","date":"2019-05-23T21:25:02+08:00","permalink":"https://kcode.cc/post/2019/05/set-up-samba-service-on-raspberry-pi.html","title":"在树莓派上搭建 Samba 服务"},{"content":"1. 简介\rLaravel 为开发者提供了一套完善的重量级本地开发环境 Laravel Homestead。\nLaravel Homestead 实际是一个打包好各种 Laravel 开发所需软件和工具的 Vagrant 盒子（关于 Vagrant 盒子的释义请参考 Vagrant 官方文档），该盒子为我们提供了一个优秀的开发环境，有了它，我们不再需要在本地环境安装 PHP、Composer、Nginx、MySQL、Memcached、Redis、Node 等其它工具软件，我们也完全不用再担心误操作搞乱操作系统 因为 Vagrant 盒子是一次性的，如果出现错误，可以在数分钟内销毁并重新创建该 Vagrant 盒子！\nHomestead 可以运行在 Windows、Mac 以及 Linux 等主流操作系统上，预装的软件和工具列表如下：\nUbuntu 16.04 Git PHP 7.1 Nginx MySQL MariaDB SQLite 3 Postgres Composer Node（With Yarn, Bower, Grunt, and Gulp） Redis Memcached Beanstalkd Mailhog ngrok 引用自[ Laravel 5.5 文档 ] 快速入门 重量级开发环境：Homestead 安装使用详细教程\n2. 准备工作\r需要先安装的软件：\nVagrant\nOracle VM VirtualBox\n可选，Vagrant 支持的虚拟机有: Parallels, VirtualBox, VMWare_Desktop。本文选用VirtualBox。\nGit For Windows\n主要是用到 Git Bash，如果你已经有替代的软件，可以不用安装。注意：Windows 的 CMD 是不行的。\n可提前下载的文件：\nlaravel/homestead\n由于官方 box 源都在境外，国内网络在线安装可能会不稳定，有文章说在线安装时不支持断点续传的，所以可以先自行用下载工具下好，具体链接为: https://atlas.hashicorp.com/laravel/boxes/homestead/versions/3.1.0/providers/virtualbox.box，其中 3.1.0 为版本号，可自行在根据情况替换。 3. 安装\r在装备儿工作都做好以后，就可以开始安装了。\n如无特殊说明，都可使用 CMD 或者 Git Bash 键入命令，尽量使用 Git Bash，本文使用 $ 来表示 Bash 下的命令，复制命令的时候请勿将 $ 一起复制。 首先使用 Git Bash 键入以下命令生成 ssh 密钥：\n1 2 $ cd ~ $ ssh-keygen -t rsa 一路回车即可。\n默认安装会将 box 安装在 C:\\Users\\你的用户名\\ 下的，如果你像我 C 盘容量紧缺的情况下，可以更改 Vagrant 的 HOME 路径，将 box 安装到其他地方，更改方法为计算机 \u0026gt; 右键 \u0026gt; 属性 \u0026gt; 高级系统设置 \u0026gt; 高级 \u0026gt; 环境变量 \u0026gt; 新建，变量名：VAGRANT_HOME，变量值：目标路径。改完需要重启一次计算机才能生效。\n3.1. 安装 Homestead Vagrant Box\r如果你是使用在线安装，可直接键入以下命令：\n1 $ vagrant box add laravel/homestead 然后出现选择虚拟机，本文使用的是 VirtualBox ，键入2，回车，然后等待下载完成。 如果使用离线安装，在 C:\\Users\\你的用户名\\ 下新建 metadata.json 文件，输入如下内容：\n1 2 3 4 5 6 7 8 9 10 { \u0026#34;name\u0026#34;: \u0026#34;laravel/homestead\u0026#34;, \u0026#34;versions\u0026#34;: [{ \u0026#34;version\u0026#34;: \u0026#34;3.1.0\u0026#34;, \u0026#34;providers\u0026#34;: [{ \u0026#34;name\u0026#34;: \u0026#34;virtualbox\u0026#34;, \u0026#34;url\u0026#34;: \u0026#34;file:///path/to/boxfile\u0026#34; }] }] } 其中 version 根据实际情况填写，下载的是 3.1.0 就填入 3.1.0， url 填写已经下载的 box 的路径，比如在 D 盘根目录，就填写 file://D:/virtualbox.box 。\n保存后键入以下命令：\n1 2 $ cd ~ $ vagrant box add metadata.json 等待载入完毕。\n若键入：\n1 $ vagrant box list 显示结果：\n1 laravel/homestead(virtualbox, 3.1.0) 则说明已经安装成功。\n3.2. 安装 Homestead\r通过克隆 Laravel 的 Github 代码来安装 Homestead :\n1 2 $ cd ~ $ git clone https://github.com/laravel/homestead.git Homestead 克隆完成后进入 Homestead 目录进行初始化：\n1 2 3 4 5 6 7 $ cd Homestead // Mac/Linux... $ bash init.sh // Windows... init.bat 4. 配置 Homestead\r初始化完成后，使用文本编辑器打开 ../Homestead/ 目录下的 Homestead.yaml 。\n4.1. 配置系统资源\r1 2 3 4 ip: \u0026#34;192.168.10.10\u0026#34; memory: 2048 cpus: 1 provider: virtualbox 这几行配置的是：虚拟机 IP 、虚拟机可使用的内存大小、虚拟机可使用的 CPU 数量、使用的虚拟机环境。可根据实际情况修改。\n4.2. 配置共享文件夹\r1 2 3 folders: - map: D:/Laravel/code to: /home/vagrant/code 这项配置的是本地与虚拟机共享的目录，如果需要增加共享文件夹的数量，可按格式自行填写即可。\n4.3. 配置 Homestead 的 Nginx\r1 2 3 sites: - map: homestead.app to: /home/vagrant/code/project/public 通过 sites 属性可以很方便地将站点映射到虚拟机的指定目录下，而不需要进入虚拟手动修改 Nignx 的配置。如果你打算在同一个Homestead同时开发多个项目，可以按照相同格式添加更多映射。\n4.3.1. 配置本机 Host\r使用管理员权限用文本编辑器将 C:\\Windows\\System32\\drivers\\etc路径下的 hosts 文件打开，向末尾添加一行：\n1 192.168.10.10 homestead.app 以后你就可以直接在浏览器中输入 http://homestead.app 访问你的项目站点了。\n4.4. 配置数据库\r1 2 databases: - homestead 本项默认数据库名为 homestead ，使用的数据库为 MySQL ，默认用户名 homestead ，默认密码 secret ，如果需要增加数据库，同样按照格式添加一个数据库名即可，Homestead 将自动为你创建。\n5. 启动虚拟系统\r安装和配置都完成了，接下来就可以启动 Vagrant Box 了：\n1 2 $ cd ~/Homestead/ $ vagrant up 等待虚拟机启动完成。接下来就可以使用 SSH 工具登陆虚拟机了，或者使用 Vagrant 自带的命令登陆亦可：\n1 $ vgrant ssh 6. 其他操作\r如果你修改了配置文件 Homestead.yaml ，只需要执行以下命令即可生效：\n1 $ vagrant reload --provision 关闭虚拟机：\n1 $ vagrant halt 销毁虚拟机：\n1 $ vagrant destroy 虚拟机名 虚拟机状态：\n1 $ vagrant global-status 更多高级玩法可以参考 Vagrant 官方文档。\n","date":"2017-10-12T12:00:00+08:00","permalink":"https://kcode.cc/post/2017/10/install-homestead-through-vagrant-in-windows.html","title":"Windows 环境下通过 Vagrant 安装 Homestead"},{"content":"GVLK (Generic Volume License Key) 是用于 KMS 客户端的通用序列号。 这里提供部分微软官方公布的 Windows 10 / Office 2013 / Office 2016 / Office 2019 的 GVLKs ，可用于 KMS 激活。\nOffice 的 GVLKs 只能用于 VOL 版!\nWindows 10\r产品 GVLK Windows 10 Professional W269N-WFGWX-YVC9B-4J6C9-T83GX Windows 10 Professional N MH37W-N47XK-V7XM9-C7227-GCQG9 Windows 10 Enterprise NPPR9-FWDCX-D2C8J-H872K-2YT43 Windows 10 Enterprise N DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4 Windows 10 Education NW6C2-QMPVW-D7KKK-3GKT6-VCFB2 Windows 10 Education N 2WH4N-8QGBV-H22JP-CT43Q-MDWWJ Windows 10 Enterprise 2015 LTSB WNMTR-4C88C-JK8YV-HQ7T2-76DF9 Windows 10 Enterprise 2015 LTSB N 2F77B-TNFGY-69QQF-B8YKP-D69TJ 注意：带 N 的版本去掉了 Windows Media Player 播放器 家庭版不需要 KMS Office 2013\r产品 GVLK Office 2013 Professional Plus YC7DK-G2NP3-2QQC3-J6H88-GVGXT Office 2013 Standard KBKQT-2NMXY-JJWGP-M62JB-92CD4 Project 2013 Professional FN8TT-7WMH6-2D4X9-M337T-2342K Project 2013 Standard 6NTH3-CW976-3G3Y2-JK3TX-8QHTT Visio 2013 Professional C2FG9-N6J68-H8BTJ-BW3QX-RM3B3 Visio 2013 Standard J484Y-4NKBF-W2HMG-DBMJC-PGWR7 Access 2013 NG2JY-H4JBT-HQXYP-78QH9-4JM2D Excel 2013 VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB InfoPath 2013 DKT8B-N7VXH-D963P-Q4PHY-F8894 Lync 2013 2MG3G-3BNTT-3MFW9-KDQW3-TCK7R OneNote 2013 TGN6P-8MMBC-37P2F-XHXXK-P34VW Outlook 2013 QPN8Q-BJBTJ-334K3-93TGY-2PMBT PowerPoint 2013 4NT99-8RJFH-Q2VDH-KYG2C-4RD4F Publisher 2013 PN2WF-29XG2-T9HJ7-JQPJR-FCXK4 Word 2013 6Q7VD-NX8JD-WJ2VH-88V73-4GBJ7 Office 2016\r产品 GVLK Office Professional Plus 2016 XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99 Office Standard 2016 JNRGM-WHDWX-FJJG3-K47QV-DRTFM Project Professional 2016 YG9NW-3K39V-2T3HJ-93F3Q-G83KT Project Standard 2016 GNFHQ-F6YQM-KQDGJ-327XX-KQBVC Visio Professional 2016 PD3-PC-RHNGV-FXJ29-8JK7D-RJRJK Visio Standard 2016 7WHWM-4T7MP-G96JF-G33KR-W8GF4 Access 2016 GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW Excel 2016 9C2PK-NWTVB-JMPW8-BFT28-7FTBF OneNote 2016 DR92N-9HTF2-97XKM-XW2WJ-XW3J6 Outlook 2016 R69KK-NTPKF-7M3Q4-QYBHW-6MT9B PowerPoint 2016 J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6 Publisher 2016 F47MM-N3XJP-TQXJ9-BP99D-8K837 SKype for Business 2016 869NQ-FJ69K-466HW-QYCP2-DDBV6 Word 2016 WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6 Office 2019\r产品 GVLK Office Professional Plus 2019 NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP Office Standard 2019 6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK Project Professional 2019 B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B Project Standard 2019 C4F7P-NCP8C-6CQPT-MQHV9-JXD2M Visio Professional 2019 7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2 Access 2019 9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT Excel 2019 TMJWT-YYNMB-3BKTF-644 FC-RVXBD Outlook 2019 7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK PowerPoint 2019 RRNCX-C64HY-W2MM7-MCH9G-TJHMQ Publisher 2019 G2KWX-3NW6P-PY93R-JXK2T-C9Y9V Skype for Business 2019 NCJ33-JHBBY-HTK98-MYCV8-HMKHJ Word 2019 PBX3G-NWMT6-Q7XBW-PYJGG-WXD33 附部分 Office2016 VOL 下载地址\rOffice 2016 Pro Plus 64位\r文件名: SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20-42426.ISO\n文件大小: 1123452928 字节\nMD5: 60DC8B1892F611E41140DD3631F39793\nSHA1: AEB58DE1BC97685F8BC6BFB0A614A8EF6903E318\nCRC32: 8D8AC6D1\n下载地址: ed2k://|file|SW_DVD5_Office_Professional_Plus_2016_64Bit_ChnSimp_MLF_X20-42426.ISO|1123452928|31087A00FF67D4F5B4CBF4AA07C3433B|/\nOffice 2016 Pro Plus 32位\r文件名: SW_DVD5_Office_Professional_Plus_2016_W32_ChnSimp_MLF_X20-41351.ISO 文件大小: 986441728 字节 MD5: 49D97BD1B4DFEAAA6B45E3DD3803DAC1 SHA1: 0218F50774AAB63AF7755B0986CDB9972B853E44 CRC32: FF96B0B5 下载地址: ed2k://|file|SW_DVD5_Office_Professional_Plus_2016_W32_ChnSimp_MLF_X20-41351.ISO|986441728|2DE74581C10096137481873B3AD57D43|/\nOffice 2016 Project Pro 64位\r文件名: SW_DVD5_Project_Pro_2016_64Bit_ChnSimp_MLF_X20-42676.ISO 文件大小: 647157760 字节 MD5: B872E55B8F4A8791D65BCF1DB46D1DCB SHA1: 3C180FDAF91DBD0CB767BD040B42B0599FC53438 CRC32: 6AB6A570 下载地址: ed2k://|file|SW_DVD5_Project_Pro_2016_64Bit_ChnSimp_MLF_X20-42676.ISO|647157760|0BBBF20CA3A5F61A819586ADCE6E4DCB|/\nOffice 2016 Project Pro 32位\r文件名: SW_DVD5_Visio_Pro_2016_64Bit_ChnSimp_MLF_X20-42759.ISO 文件大小: 714913792 字节 MD5: 93BEB874F5A5870D5854519856047103 SHA1: 71E082174812F748AB1A70CA33E6004E1E1AACA8 CRC32: F813794B 下载地址: ed2k://|file|SW_DVD5_Project_Pro_2016_W32_ChnSimp_MLF_X20-41511.ISO|555210752|CA3BD5F8C7B3E263105B041DDD4104AB|/\nOffice 2016 Visio Pro 64位\r文件名: SW_DVD5_Visio_Pro_2016_64Bit_ChnSimp_MLF_X20-42759.ISO 文件大小: 714913792 字节 MD5: 93BEB874F5A5870D5854519856047103 SHA1: 71E082174812F748AB1A70CA33E6004E1E1AACA8 CRC32: F813794B 下载地址: ed2k://|file|SW_DVD5_Visio_Pro_2016_64Bit_ChnSimp_MLF_X20-42759.ISO|714913792|FC930AB97B366B3595FC2F28ABAC2A6F|/\nOffice 2016 Visio Pro 32位\r文件名: SW_DVD5_Visio_Pro_2016_W32_ChnSimp_MLF_X20-41580.ISO 文件大小: 609447936 字节 MD5: 96E008B110F308F1E424D11964D82CE0 SHA1: 780046411EB18874AA2DA7E4A11322557EB00D92 CRC32: 42E1653D 下载地址: ed2k://|file|SW_DVD5_Visio_Pro_2016_W32_ChnSimp_MLF_X20-41580.ISO|609447936|91EB248558F236AA66D234EA03FAD9A9|/\n","date":"2017-03-14T12:00:00+08:00","permalink":"https://kcode.cc/post/2017/03/gvlks-of-windows-and-office.html","title":"Windows 和 Office KMS 密钥"}]